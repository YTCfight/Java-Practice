package fanshe;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class Test {
    public static void main(String[] args) {
        try {
            Class myClass = Class.forName("fanshe.MyData");

            Constructor constructor = myClass.getDeclaredConstructor(null);
            constructor.setAccessible(true);
            MyData myData = (MyData)constructor.newInstance();

            Constructor constructor1 = myClass.getDeclaredConstructor(int.class, int.class);
            constructor1.setAccessible(true);
            constructor1.newInstance(1, 2);

            Field field = myClass.getDeclaredField("a");
            field.setAccessible(true);
            field.set(myClass, 10);
            System.out.println(field.get(myData));

            Method method = myClass.getDeclaredMethod("eat");
            method.setAccessible(true);
            method.invoke(myData);

            Method method1 = myClass.getDeclaredMethod("eat", String.class);
            method1.setAccessible(true);
            method1.invoke(myData,"s");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        }


        try {
            Class myClass = Class.forName("fanshe.MyData");
            Constructor[] constructors = myClass.getDeclaredConstructors();
            for (Constructor c : constructors) {
                System.out.println(c.toString());
            }

            Field[] fields = myClass.getDeclaredFields();
            for (Field f : fields) {
                System.out.println(f.toString());
            }

            Method[] methods = myClass.getDeclaredMethods();
            for (Method method : methods) {
                System.out.println(method.toString());
            }
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}
