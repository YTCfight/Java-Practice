//得到一个节点
class LinkedNode {
    public int data = 0;
    public LinkedNode next = null;

//    void setData(int d) {
//        this.data = d;
//    }

    //构造函数（初始化）
    public LinkedNode(int data) {
        this.data = data;
    }
//
//    public void setNext(LinkedNode next) {
//        this.next = next;
//    }
}

public class Linkedlist1 {
    //链表的头结点(head存的是地址值）
    private LinkedNode head = null;

    //头插
    public void addFirst(int elem) {
        //先创建一个节点，让这个节点的值就是elem
        LinkedNode node = new LinkedNode(elem);
        //node.data = elem;
        if (this.head == null) {
            this.head = node;
            return;
        }
        //如果不是空链表，就需要把显得节点放到链表的开始位置
        else {
            node.next = head;
            this.head = node;
            return;
        }
    }

    //打印链表内容
    public void display() {
        System.out.print("[");
        for (LinkedNode node = this.head; node != null; node = node.next) {
            System.out.print(node.data);
            if (node.next != null) {
                System.out.print(", ");
            }
        }
        System.out.println("]");
    }

    //尾插
    public void addLast(int elem) {
        LinkedNode node = new LinkedNode(elem);
        //空链表的时候
        if (this.head == null) {
            this.head = node;
            return;
        }
        LinkedNode cur = this.head;
        //循环完后，cur是最后一个节点。
        while (cur.next != null) {
            cur = cur.next;
        }
        cur.next = node;
        return;
    }
    //任意位置插入数据
    public void addIndex(int index, int elem) {
        LinkedNode node = new LinkedNode(elem);
        //插入到其他位置,先对index进行合法性的校验，需要知道链表的长度。
        int len = size();
        if (index < 0 || index > len) {
            return;
        }
        //处理头插情况
        if (index == 0) {
            addFirst(elem);
            return;
        }
        //尾插
        if (index == len) {
            addLast(elem);
            return;
        }
        //prev这个引用就对应到index - 1 这个位置上
        LinkedNode prev = getIndexPos(index - 1);
        //完成插入过程
        node.next = prev.next;
        prev.next = node;
    }

    private LinkedNode getIndexPos(int index) {
        LinkedNode cur = this.head;
        for (int i = 0; i < index; i++) {
            cur = cur.next;
        }
        return cur;
    }

    public int size() {
        int size = 0;
        for (LinkedNode cur = this.head; cur != null; cur = cur.next) {
            size++;
        }
        return size;
    }

    //检查某个值是否存在
    public boolean contains(int toFind) {
        for (LinkedNode cur = this.head; cur != null; cur = cur.next) {
            if (cur.data == toFind) {
                return true;
            }
        }
        return false;
    }

    //移除某个元素（删除第一次出现的那个数字）
    public void remove(int toMove) {
        //空链表情况
        if (head == null) {
            return;
        }
        //考虑是否要删除的是头结点
        if (head.data == toMove) {
            this.head = this.head.next;
            return;
        }
        //删除中间的节点，找到要删除的前一个元素
        LinkedNode prev = searchPrev(toMove);
        //prev.next = prev.next.next;   这种写法虽然没错，但是比较抽象
        LinkedNode nodeToRemove = prev.next;
        prev.next = nodeToRemove.next;
    }
    private LinkedNode searchPrev(int toRemove) {
        //找到要删除元素的前一个位置。
        if (this.head == null) {
            return null;
        }
        LinkedNode prev = this.head;
        while (prev.next != null) {
            if (prev.next.data == toRemove) {
                return prev;
            }
            prev = prev.next;
        }
        //返回 nul 表示没找到
        return null;
    }
    
    
    
    //删除元素（可以全部删除某个数字）
    public void remove(int toRemove) {
        //空链表时
        if (this.head == null) {
            return;
        }
        //删除头结点时
        if (head.data == toRemove) {
            head = head.next;
            return;
        }
        //删除中间元素时,首先找到要删除元素的前一个元素。
        LinkedNode2 code = this.head;
        while (code != null) {
            //找到删除元素的前一个元素。
            LinkedNode2 prev = searchPos(toRemove);
            LinkedNode2 cur = head;  //随便给cur初始化一个值
            if (prev != null) {
                cur = prev.next;
                prev.next = cur.next;
            }
            code = code.next;
        }
    }
    private LinkedNode2 searchPos(int toRemove) {
        for (LinkedNode2 cur = this.head; cur.next != null; cur = cur.next) {
            if (cur.next.data == toRemove) {
                return cur;
            }
        }
        return null;
    }
}





//测试
public class Linkedlist {
    public static void main(String[] args) {
        //testAddFirst();
        //testAddLast();
        //testAddIndex();
        //testAddIndex();
        //testContains();
        testRemove();
    }

    public static void testAddFirst() {
        System.out.println("测试头插");
        Linkedlist1 list = new Linkedlist1();
        list.addFirst(1);
        list.addFirst(2);
        list.addFirst(3);
        list.addFirst(4);
        list.display();
    }

    public static void testAddLast() {
        System.out.println("测试尾插");
        Linkedlist1 list = new Linkedlist1();
        list.addLast(1);
        list.addLast(2);
        list.addLast(3);
        list.addLast(4);
        list.display();
    }

    public static void testAddIndex() {
        System.out.println("测试随意插入");
        Linkedlist1 list = new Linkedlist1();
        list.addLast(1);
        list.addLast(2);
        list.addLast(3);
        list.addLast(4);
        list.display();
        //在index 2 的位置插入 5
        list.addIndex(2,5);
        list.display();
    }

    public static void testContains() {
        System.out.println("测试是否在链表中存在");
        Linkedlist1 list = new Linkedlist1();
        list.addLast(1);
        list.addLast(2);
        list.addLast(3);
        list.addLast(4);
        boolean result = list.contains(3);
        System.out.println("result 预期值是 true，实际值是 " + result);
    }

    public static void testRemove() {
        System.out.println("测试删除链表中的元素");
        //测试用例
        //1.空链表 2.删除头部节点 3.删除普通节点 4.删除一个不存在的元素 5.删除重复元素
        Linkedlist1 list = new Linkedlist1();
        list.addLast(1);
        list.addLast(2);
        list.addLast(3);
        list.addLast(4);
        list.display();
        list.remove(1);
        list.display();
    }
}
