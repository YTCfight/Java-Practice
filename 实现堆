package tree2;

import java.util.Arrays;

public class Heap {
    //在 ayyay 中，[0， size) 的部分是一个堆结构
    //index 从哪个位置开始下沉
    public static void shiftDown(int[] array, int size, int index) {
        int parent = index;
        int child = 2 * parent + 1;
        while (child < size) {
            //child 本来是左子树的下标，加一后就是右子树的下标
            //再找左子树和右子树谁大
            if (child + 1 < size && array[child + 1] > array[child]) {
                child = child + 1;
            }
            //if 之后不知道 child 是左还是右了，而一定是左右中的最大值
            if (array[child] > array[parent]) {
                //不符合大堆的特性，交换child 和 parent
                swap(array, parent, child);
            } else {
                //如果发现满足堆的特性，调整就结束了
                break;
            }
            parent = child;
            child = 2 * parent + 1;
        }
    }

    private static void swap(int[] array, int x, int y) {
        int tmp = array[x];
        array[x] = array[y];
        array[y] = tmp;
    }

    //要把[0， size）范围中的元素建成堆
    private static void createHelp(int[] array, int size) {
        //从最后一个非叶子节点出发，从后往前走，针对每个节点，进行向下调整
        //最后一个元素的下标 size - 1
        //最后一个非叶子节点下标 (size - 1 - 1) / 2
        for (int i = (size - 1 - 1) / 2; i >= 0; i--) {
            shiftDown(array, size, i);
        }
    }

    public static void main(String[] args) {
        int[] arr = {9,5,2,7,3,6,8,1};
        createHelp(arr, arr.length);
        System.out.println(Arrays.toString(arr));
    }
}
