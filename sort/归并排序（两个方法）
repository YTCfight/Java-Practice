//归并排序（递归）
    public static void mergeSort(int[] array) {
        //后两个参数表示要进行归并排序的区间
        //[0,array.length)
        mergeSortHelp(array, 0, array.length);
    }
    private static void mergeSortHelp(int[] array, int left, int right) {
        //[left, right) 构成了要去进行排序的区间
        if (left >= right || right - left == 1) {
            //空区间或者期间只有一个元素，都不需要进行归并排序
            return;
        }
        //使用一种类似于后序遍历的方式
        //先把当前的待排序区间拆分成两半，
        //先递归的对这两个子区间进行归并排序，保证两个区间有序之后，再进行合并
        int mid = (left + right) / 2;
        //[left, mid)
        //[mid, right)
        mergeSortHelp(array, left, mid);
        mergeSortHelp(array, mid, right);
        merge(array, left, mid, right);
    }
    //merge 是一个左闭右开的区间
    private static void merge(int[] array, int left, int mid, int right) {
        //创建一段临时空间辅助进行归并
        //这个临时空间的长度应该是两个带归并区间的长度之和
        int length = right - left;
        int[] output = new int[length];
        //这个变量保存着当前 output 中的末尾元素的下标
        int outputIndex = 0;
        //i 和 j 是用来遍历两个区间的辅助变量
        //[left, mid)
        //[mid, right)
        int i = left;
        int j = mid;
        while (i < mid && j < right) {
            //此处的 if 条件必须要 <= ，否则无法保证稳定性
            if (array[i] <= array[j]) {
                //i 对用的元素比 j 小
                //就把 i 对用的元素插入到 output 末尾
                output[outputIndex++] = array[i++];
            } else {
                output[outputIndex++] = array[j++];
            }
        }
        //上面的循环结束之后，两个区间至少有一个是遍历完了的，
        //就把剩下的区间的内容直接拷贝到 output 中即可。
        while (i < mid) {
            output[outputIndex++] = array[i++];
        }
        while (j < right) {
            output[outputIndex++] = array[j++];
        }
        //最后一步把 output 中的元素拷贝回原来的区间
        for (int k = 0; k < length; k++) {
            array[left + k] = output[k];
        }
    }

    //归并排序（非递归）
    public static void mergeSortByLoop(int[] array) {
        //借助下标和相关的规律来进行分组
        //初始情况下，每个元素单独作为一组
        //[0] [1]  [2] [3] [4] [5]
        //[0, 1] 和[2, 3] 合并 [4, 5] 和 [6, 7]区间合并
        for (int gap = 1; gap < array.length; gap *= 2) {
            for (int i = 0; i < array.length; i += 2 * gap) {
                //这个循环负责在 gap 为指定值的情况下把所有区间进行合并
                //针对当前的 i ，也能划分出两个需要进行归并的区间
                //[beg, mid)
                //[mid, end)
                int beg = i;
                int mid = i + gap;
                int end = i + 2 * gap;
                //防止 mid 越界
                if (mid > array.length) {
                    mid = array.length;
                }
                //防止 end 越界
                if (end > array.length) {
                    end = array.length;
                }
                merge(array, beg, mid, end);
            }
        }
    }
